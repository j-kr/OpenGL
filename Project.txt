#include <windows.h>
#include <math.h>

#include <gl\gl.h>
#include <gl\glu.h>

#define M_PI 3.1415926
float a,b,c;
float x = 10.0,y=10.0,z=0.0;
float far_p = 10.0, near_p=100.0,sr_ukl = -50.0;
float ws1 = 1.0;
float ws2 = 1.0;
float ws3 = 1.0;
float ws4 = 1.0;
float ws5 = 1.0;
boolean wl_speed;
//deklaracja funkcji obslugi okna
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
void my_init(void);
void  my_display5(void);
void  my_display4(void);
void  my_display3(void);
void  my_display2(void);
void  my_display(void);
void bulb_movement(void);
BOOL SetWindowPixelFormat(HDC hDC);
BOOL CreateViewGLContext(HDC hDC);
void RenderScene();
void CreateMaze();

//glCullFace(GL_BACK);
GLUquadricObj* obj;

int g_GLPixelIndex = 0;
HGLRC g_hGLContext = NULL;
HDC g_context = NULL;

double g_counter = 0.0;


#define MODE_NUM   3
GLfloat angle = 0.1f, speed = 0.1f, two_side = 1.0f;
GLfloat odl_perspk = 100.0, odl_perspp=15.0;
GLboolean zmiana_persp = GL_TRUE;
GLboolean swiatlo1=GL_TRUE, swiatlo2=GL_TRUE;
GLint cieniowanie=GL_SMOOTH;
GLint my_w, my_h;
GLboolean wl_kamere=GL_FALSE;
GLenum          mode [MODE_NUM] = {
                      GL_FILL,
                      GL_LINE,
                      GL_POINT };
int             mode_num = 0;
	GLfloat front_shininess[] = {0.0};

	GLfloat front_specular[] = {0.8f, 1.0f, 0.1f, 1.0f};
    GLfloat front_diffuse[] = {0.8f, 1.0f, 0.1f, 1.0f};
	//GLfloat front_diffuse[] = {1.0, 0.0, 0.0, 1.0f};
	//GLfloat front_specular[] = {1.0f, 1.0f, 1.0f, 1.0f};

	GLfloat back_diffuse[] = {0.2f, 0.5f, 0.9f, 1.0f};

	GLfloat torus_ambient_and_diffuse[] = { 0.0f, 0.8f, 0.0f, 0.5f };
    GLfloat torus_emission[] = { 0.3f, 0.2f, 0.1f, 0.5F };
    GLfloat bulb_ambient_and_diffuse[] = { 0.4f, 0.4f, 0.1f, 0.5f };
    GLfloat bulb_emission[] = { 0.8f, 0.7f, 0.1f, 1.0f };
	GLfloat p1_emission[] = { 0.2f, 0.2f, 0.6f, 0.65f };
	GLfloat p2_emission[] = { 0.8f, 0.2f, 0.1f, 0.5f };
	GLfloat p3_emission[] = { 0.1f, 0.9f, 0.5f, 0.5f };
	GLfloat p4_emission[] = { 0.4f, 0.2f, 0.8f, 0.7f };
    GLfloat light_position[] = { 0.0f, 0.0f, 0.0f, 1.0f };
	GLfloat light1_pos[] = { 0.0f, 0.0f, 1.0f, 1.0f };

//funkcja Main - dla Windows
int WINAPI WinMain(HINSTANCE hInstance,
               HINSTANCE hPrevInstance,
               LPSTR     lpCmdLine,
               int       nCmdShow)
{
	MSG meldunek;		  //innymi slowy "komunikat"
	WNDCLASS nasza_klasa; //klasa g3ównego okna aplikacji
	HWND okno;
	static char nazwa_klasy[] = "Podstawowa";

	//Definiujemy klase g3ównego okna aplikacji
	//Okreslamy tu wlasciwosci okna, szczegoly wygladu oraz
	//adres funkcji przetwarzajacej komunikaty
	nasza_klasa.style         = CS_HREDRAW | CS_VREDRAW;
	nasza_klasa.lpfnWndProc   = WndProc; //adres funkcji realizuj1cej przetwarzanie meldunków
 	nasza_klasa.cbClsExtra    = 0 ;
	nasza_klasa.cbWndExtra    = 0 ;
	nasza_klasa.hInstance     = hInstance; //identyfikator procesu przekazany przez MS Windows podczas uruchamiania programu
	nasza_klasa.hIcon         = 0;
	nasza_klasa.hCursor       = LoadCursor(0, IDC_ARROW);
	nasza_klasa.hbrBackground = (HBRUSH) GetStockObject(GRAY_BRUSH);
	nasza_klasa.lpszMenuName  = "Menu" ;
	nasza_klasa.lpszClassName = nazwa_klasy;

    //teraz rejestrujemy klase okna g3ównego
    RegisterClass (&nasza_klasa);

	/*tworzymy okno g3ówne
	okno bedzie mia3o zmienne rozmiary, listwe z tytu3em, menu systemowym
	i przyciskami do zwijania do ikony i rozwijania na ca3y ekran, po utworzeniu
	bedzie widoczne na ekranie */
 	okno = CreateWindow(nazwa_klasy, "Grafika komputerowa", WS_OVERLAPPEDWINDOW | WS_VISIBLE | WS_CLIPCHILDREN | WS_CLIPSIBLINGS,
						100, 50, 700, 700, NULL, NULL, hInstance, NULL);


	ShowWindow (okno, nCmdShow) ;

	//odswiezamy zawartosc okna
	UpdateWindow (okno) ;

	// GLÓWNA PETLA PROGRAMU
	while (GetMessage(&meldunek, NULL, 0, 0))
     /* pobranie komunikatu z kolejki; funkcja GetMessage zwraca FALSE tylko dla
	 komunikatu wm_Quit; dla wszystkich pozosta3ych komunikatów zwraca wartooa TRUE */
	{
		TranslateMessage(&meldunek); // wstepna obróbka komunikatu
		DispatchMessage(&meldunek);  // przekazanie komunikatu w3aociwemu adresatowi (czyli funkcji obslugujacej odpowiednie okno)
	}
	return (int)meldunek.wParam;
}
void przesun_kamere (float ax, float ay, float az)
{	glMatrixMode(GL_PROJECTION);
	glPopMatrix();
	glPushMatrix();
	//gluLookAt(10,10,20,0,0,-20,0,1,0);
	gluLookAt(x,y,z,0,0,sr_ukl,0,1,0);
}
/********************************************************************
FUNKCJA OKNA realizujaca przetwarzanie meldunków kierowanych do okna aplikacji*/
LRESULT CALLBACK WndProc (HWND okno, UINT kod_meldunku, WPARAM wParam, LPARAM lParam)
{
	HMENU mPlik, mInfo, mGlowne;

/* PONI—SZA INSTRUKCJA DEFINIUJE REAKCJE APLIKACJI NA POSZCZEGÓLNE MELDUNKI */
	switch (kod_meldunku)
	{
	case WM_CREATE:  //meldunek wysy3any w momencie tworzenia okna
		{
			mPlik = CreateMenu();
			AppendMenu(mPlik, MF_STRING, 101, "&Koniec");
			mInfo = CreateMenu();
			AppendMenu(mInfo, MF_STRING, 200, "&Autor...");
			mGlowne = CreateMenu();
			AppendMenu(mGlowne, MF_POPUP, (UINT_PTR) mPlik, "&Plik");
			AppendMenu(mGlowne, MF_POPUP, (UINT_PTR) mInfo, "&Informacja");
			SetMenu(okno, mGlowne);
			DrawMenuBar(okno);

			g_context = GetDC(okno);

			if (SetWindowPixelFormat(g_context)==FALSE)
				return FALSE;

			if (CreateViewGLContext(g_context)==FALSE)
				return 0;

			my_init();

			SetTimer(okno, 1, 33, NULL);
					//glCullFace(GL_BACK);
			obj = gluNewQuadric();
			gluQuadricNormals(obj,GL_SMOOTH);

			return 0;
		}

	case WM_COMMAND: //reakcje na wybór opcji z menu
		switch (wParam)
		{
			case 101: DestroyWindow(okno); //wysylamy meldunek WM_DESTROY
        			  break;
			case 200: MessageBox(okno, "Imie i nazwisko:\nNumer indeksu: ", "Autor", MB_OK);
		}
		return 0;
	case WM_CHAR: //reakcje na wybór opcji z menu
		switch (wParam)
		{
			case 'A': // zmiana X-

						x=x-1;
						przesun_kamere(x,y,z);
        			  break;
			case 'D':// zmiana X+

						x=x+1;
						przesun_kamere(x,y,z);
        			  break;
			case 'W':// zmiana Y+

						y=y+1;
						przesun_kamere(x,y,z);
        			  break;
			case 'S':// zmiana Y+

						y=y-1;
						przesun_kamere(x,y,z);
        			  break;
			case 'Q':// zmiana Z-

						z=z-1;
						przesun_kamere(x,y,z);
        			  break;
			case 'E':// zmiana Z-

						z=z+1;
						przesun_kamere(x,y,z);
        			  break;
			case 'R':// zmiana sr_ukl-

						sr_ukl = sr_ukl -1;
						przesun_kamere(x,y,z);
        			  break;
			case 'F':// zmiana sr_ukl+

						sr_ukl = sr_ukl +1;
						przesun_kamere(x,y,z);
        			  break;
			case 'T':// RESET UKLADU WSP

						x=0; y=0;z=0; sr_ukl = -50.0;
						przesun_kamere(x,y,z);
        			  break;
			case 'U':
				if (wl_speed)
					{
						speed = 0.1;
							}
					else
					{
						speed = 0.0;
						angle = 0.0;
					}
					wl_speed^=GL_TRUE;
			case 'm':
				 mode_num--;

				   if (mode_num < 0)
					 mode_num = 0;
				   else
					 glPolygonMode(GL_FRONT_AND_BACK, mode[mode_num]);
			case 'n':
				mode_num++;

			   if (mode_num >= MODE_NUM)
				 mode_num = MODE_NUM - 1;
			   else
				 glPolygonMode(GL_FRONT_AND_BACK, mode[mode_num]);

			case 'z':
				ws1 = 1 - ws1;



					case 'x':
				ws2 = 1 - ws2;


					case 'c':
				ws3 = 1 - ws3;

					case 'v':
				ws4 = 1 - ws4;

					case 'b':
				ws5 = 1 - ws5;
				}
		return 0;

	case WM_LBUTTONDOWN: //reakcja na lewy przycisk myszki
		{	if(speed < 25.6) speed *= 2;


			return 0;
		}
	case WM_RBUTTONDOWN:
		{
			if(speed > 0.00626) speed /= 2;
			return 0;
		}
	case WM_PAINT:
		{
			PAINTSTRUCT paint;
			HDC kontekst;
			kontekst = BeginPaint(okno, &paint);

			RenderScene();
			SwapBuffers(kontekst);

			EndPaint(okno, &paint);

			return 0;
		}

	case WM_TIMER:
		InvalidateRect(okno, NULL, FALSE);
		bulb_movement();
		g_counter += 0.5;
		if (g_counter > 359)
			g_counter = 0;

		return 0;

	case WM_SIZE:
		{
			int cx = LOWORD(lParam);
			int cy = HIWORD(lParam);

			GLsizei width, height;
			GLdouble aspect;
			width = cx;
			height = cy;

			if (cy==0)
				aspect = (GLdouble)width;
			else
				aspect = (GLdouble)width/(GLdouble)height;
			my_init();
			glViewport(0, 0, width, height);
			x=0;y=0;z=0; far_p = 100; near_p = 10;
			glMatrixMode(GL_PROJECTION);
			glLoadIdentity();
			gluPerspective(55, aspect, near_p, far_p);
		    gluLookAt(x,y,z,0,0,sr_ukl,0,1,0);
			glMatrixMode(GL_MODELVIEW);
			glLoadIdentity();

			glDrawBuffer(GL_BACK);

			glEnable(GL_LIGHTING);

			glEnable(GL_DEPTH_TEST);

			return 0;
		}

	case WM_DESTROY: //obowi1zkowa obs3uga meldunku o zamknieciu okna
		if(wglGetCurrentContext()!=NULL)
		{
			// dezaktualizacja kontekstu renderuj1cego
			wglMakeCurrent(NULL, NULL) ;
		}
		if (g_hGLContext!=NULL)
		{
			wglDeleteContext(g_hGLContext);
			g_hGLContext = NULL;
		}

		ReleaseDC(okno, g_context);
		KillTimer(okno, 1);

		PostQuitMessage (0) ;
		return 0;

	default: //standardowa obs3uga pozosta3ych meldunków
		return DefWindowProc(okno, kod_meldunku, wParam, lParam);
	}
}

BOOL SetWindowPixelFormat(HDC hDC)
{
	PIXELFORMATDESCRIPTOR pixelDesc;

	pixelDesc.nSize = sizeof(PIXELFORMATDESCRIPTOR);
	pixelDesc.nVersion = 1;
	pixelDesc.dwFlags = PFD_DRAW_TO_WINDOW |PFD_SUPPORT_OPENGL |PFD_DOUBLEBUFFER |PFD_STEREO_DONTCARE;
	pixelDesc.iPixelType = PFD_TYPE_RGBA;
	pixelDesc.cColorBits = 32;
	pixelDesc.cRedBits = 8;
	pixelDesc.cRedShift = 16;
	pixelDesc.cGreenBits = 8;
	pixelDesc.cGreenShift = 8;
	pixelDesc.cBlueBits = 8;
	pixelDesc.cBlueShift = 0;
	pixelDesc.cAlphaBits = 0;
	pixelDesc.cAlphaShift = 0;
	pixelDesc.cAccumBits = 64;
	pixelDesc.cAccumRedBits = 16;
	pixelDesc.cAccumGreenBits = 16;
	pixelDesc.cAccumBlueBits = 16;
	pixelDesc.cAccumAlphaBits = 0;
	pixelDesc.cDepthBits = 32;
	pixelDesc.cStencilBits = 8;
	pixelDesc.cAuxBuffers = 0;
	pixelDesc.iLayerType = PFD_MAIN_PLANE;
	pixelDesc.bReserved = 0;
	pixelDesc.dwLayerMask = 0;
	pixelDesc.dwVisibleMask = 0;
	pixelDesc.dwDamageMask = 0;
	g_GLPixelIndex = ChoosePixelFormat( hDC, &pixelDesc);

	if (g_GLPixelIndex==0)
	{
		g_GLPixelIndex = 1;

		if (DescribePixelFormat(hDC, g_GLPixelIndex, sizeof(PIXELFORMATDESCRIPTOR), &pixelDesc)==0)
		{
			return FALSE;
		}
	}

	if (SetPixelFormat( hDC, g_GLPixelIndex, &pixelDesc)==FALSE)
	{
		return FALSE;
	}

	return TRUE;
}
BOOL CreateViewGLContext(HDC hDC)
{
	g_hGLContext = wglCreateContext(hDC);

	if (g_hGLContext == NULL)
	{
		return FALSE;
	}

	if (wglMakeCurrent(hDC, g_hGLContext)==FALSE)
	{
		return FALSE;
	}

	return TRUE;
}

void RenderScene()
{

    my_display();

	glFlush();

}
void my_init(void){
	GLfloat color_amb[]={1.f,1.f,1.f,1.0f};

	glBlendFunc(GL_SRC_ALPHA, GL_DST_ALPHA);
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glLightModelf(GL_LIGHT_MODEL_TWO_SIDE,1);
	glLightModelfv(GL_LIGHT_MODEL_AMBIENT,&color_amb[0]);

    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
	glPolygonMode(GL_BACK,GL_LINE);
	glPolygonMode(GL_FRONT,GL_FILL);
    glEnable(GL_DEPTH_TEST);
   // glEnable(GL_CULL_FACE);
	glShadeModel(GL_SMOOTH);


    }

void rysuj_ukl_wsp()
{   glDisable(GL_LIGHTING);
	glEnable(GL_COLOR_MATERIAL);
	//glColorMaterial(
	glBegin(GL_LINES);
		glColor3f(1.0f,0.0f,0.0f); //X
		glVertex3f(-20,0,0); glVertex3f(20,0,0);
		glColor3f(0.0f,1.0f,0.0f); //Y
		glVertex3f(0,-20,0); glVertex3f(0,20,0);
		glColor3f(0.0f,0.0f,1.0f);//Z
		glVertex3f(0,0,-20); glVertex3f(0,0,20);
	glEnd();
	glDisable(GL_COLOR_MATERIAL);
	glEnable(GL_LIGHTING);
}

void my_display()
{
	a=5;b=5;c=5;
	glMatrixMode(GL_MODELVIEW);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glDepthMask(GL_TRUE);

	glDisable(GL_LIGHTING);
	glEnable(GL_COLOR_MATERIAL);


	glPushMatrix();
    	glTranslatef(0.0, 0.0, sr_ukl);
		rysuj_ukl_wsp();


	glDisable(GL_LIGHTING);
	glEnable(GL_COLOR_MATERIAL);

        glPushMatrix();
            glColor3f(1.0f,1.0f,0.0f);
            glRotatef(ws1*angle, 1,0,0); //X
            glTranslatef(a,c,0);
            glRotatef(ws2*angle, 0,c,-b); // 1 I
            gluSphere(obj,1,25,25);
        //glPopMatrix()

        //glPushMatrix();
            glColor3f(0.0f,1.0f,0.0f);
            //glRotatef(ws4*angle, 1,1,0); //4
            glTranslatef(0,-c,b);
            gluSphere(obj,1.4,25,25);
        //glPopMatrix();

        glBegin(GL_LINES);
            glColor3f(1.0f,0.0f,0.0f);
            glVertex3f(0,0,0); glVertex3f(0,c,-b);
        glEnd();

            //glPushMatrix();
            glColor3f(1.0f,1.0f,1.0f);
         //  glRotatef(ws5*angle, 0,1,0); //5
            glTranslatef(0,-c,-b);
            gluSphere(obj,1.5,25,25);

      //  glPopMatrix();


        glPushMatrix();
            glColor3f(0.0f,1.0f,1.0f);

            glTranslatef(0,c,-b);
            glRotatef(ws3*angle, 0,1,0); //3
            gluSphere(obj,1.3,25,25);
        glPopMatrix();


        //glPushMatrix();
            glColor3f(1.0f,0.0f,1.0f);
         //   glRotatef(ws2*angle, 1,1,0); //2
            glTranslatef(0,c,0);
            gluSphere(obj,1.2,25,25);
        glPopMatrix();





	glPopMatrix();

    glFlush();
}

void  my_display3(void){
	GLfloat front_shininess[] = {50.0};
    GLfloat front_specular[] = {1.0, 1.0, 1.0, 1.0f};
    GLfloat front_diffuse[] = {1.0, 1.0, 1.0, 1.0f};

	GLfloat torus_ambient_and_diffuse[] = { 0.0, 0.8, 0.0, 0.5f };
    GLfloat torus_emission[] = { 0.3, 0.2, 0.1, 0.5F };
    GLfloat bulb_ambient_and_diffuse[] = { 0.4, 0.4, 0.1, 1.0f };
    GLfloat bulb_emission[] = { 0.2f, 0.3f, 0.3f, 1.0f };
    GLfloat light_position[] = { 0.0f, 0.0f, -20.0f, 20.0f };
	a=5;b=5;c=5;
	glMatrixMode(GL_MODELVIEW);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glDepthMask(GL_TRUE);

	glPushMatrix();
    	glTranslatef(0.0, 0.0, sr_ukl);
		rysuj_ukl_wsp();
		glRotatef(ws1*angle/6,0,1,0); //Y

		glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, bulb_ambient_and_diffuse);
		glMaterialfv(GL_FRONT, GL_EMISSION, bulb_emission);
		gluSphere(obj,1,25,25); //A

		glPushMatrix();  //oswietlenie
			glRotatef(angle*1.5, 0.0, 1.0, 0.0);
			glTranslatef(0.0, 0.0, 15.0);
			glLightfv(GL_LIGHT0, GL_POSITION, light_position);
			glLightfv(GL_LIGHT0, GL_SPECULAR, front_specular);
			glLightfv(GL_LIGHT0, GL_DIFFUSE, front_diffuse);
			glLightf(GL_LIGHT0,GL_CONSTANT_ATTENUATION,2.9F);
			glLightf(GL_LIGHT0,GL_LINEAR_ATTENUATION,0.1F);
			glLightf(GL_LIGHT0,GL_QUADRATIC_ATTENUATION,0.01F);
			glLightf(GL_LIGHT0,GL_SPOT_CUTOFF,180.0F);
			glLightf(GL_LIGHT0,GL_SPOT_EXPONENT,0.0F);

			glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, bulb_ambient_and_diffuse);
			glMaterialfv(GL_FRONT, GL_EMISSION, bulb_emission);


			gluSphere(obj,1,25,25);
		glPopMatrix();

		glPushMatrix();
			glTranslatef(0,-b,0); // T2
			glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, bulb_ambient_and_diffuse);
			glMaterialfv(GL_FRONT, GL_EMISSION, bulb_emission);
			/*GLUquadricObj* obj11 = gluNewQuadric();
			gluQuadricNormals(obj11,GL_SMOOTH);*/
			gluSphere(obj,1,50,50); //A1
			glTranslatef(a,0,0);
			gluSphere(obj,1,50,50); //B

			glPushMatrix();
				glEnable(GL_COLOR_MATERIAL);
				glColorMaterial(GL_FRONT_AND_BACK,GL_AMBIENT_AND_DIFFUSE);
				glRotatef(angle, -1,1,0);  // rotacja wzgledem I

				glPushMatrix(); //D oraz C

					glRotatef(angle,-1,0,1); // rotacja wzgledem II
					glTranslatef(-a,b,c);
					glColor4f(1.,0.,0.,1.);
					gluSphere(obj,.5,50,50); //K2
				glPopMatrix();
				glPushMatrix();
					glTranslatef(0,0,c);

					glColor4f(1.,0.,1.,1.);
					GLUquadricObj* obj3 = gluNewQuadric();
					gluQuadricNormals(obj3,GL_SMOOTH);

					gluSphere(obj3,1,50,50); //K1
				glPopMatrix();
				glDisable(GL_COLOR_MATERIAL);

			glPopMatrix();

			glTranslatef(0,0,10); // T3
			glMaterialfv(GL_FRONT, GL_SHININESS, front_shininess);
			glMaterialfv(GL_FRONT, GL_SPECULAR, front_specular);
			glMaterialfv(GL_FRONT, GL_DIFFUSE, front_diffuse);
			gluSphere(obj,1,50,50); //K3


		glPopMatrix();

	glPopMatrix();

    glFlush();

    }

GLfloat rad2deg(GLfloat rad) {
	return (rad*180/M_PI);
}

GLfloat deg2rad(GLfloat kat) {
	return (kat*M_PI/180);
}
void bulb_movement(void){

    angle += speed;

    }
